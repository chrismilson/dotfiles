#!/usr/bin/env bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/chrismilson/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:chrismilson/dotfiles.git"

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Check for git
if ! type_exists 'git'; then
    e_error "No git installation!"
    exit 1;
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."

    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master

    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD

    # Remove any untracked files
    git clean -fd
fi

# A list of files and their destinations
declare -A target

# The default target is "~/.<basename>"
declare default_target=(
    "bash/bash_profile"
    "bash/bashrc"
    "bash/curlrc"
    "bash/inputrc"
    "git/gitignore"
)

for index in "${!default_target[@]}"; do
    # Map each file to the default target
    file="${default_target[$index]}"
    target["${file}"]="${HOME}/.$(basename ${file})"
done

install() {
    # Copy `.gitconfig` 
    # Any global git commands (in `~/.bash_profile.local` for example) will be 
    # written to `~/.gitonfig`. This prevents them from being committed to the
    # repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig ${HOME}/.gitconfig

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    for file in "${!target[@]}"; do
        ln -f "${file}" "${target[$file]}"
    done

    e_success "Dotfiles update complete!"
}

update() {
    # pull the remote
    git fetch origin master

    # Reset the index and working tree to the fetched HEAD
    git reset --hard FETCH_HEAD

    # Remove any untracked files
    git clean -fd

    # install the new files
    install
}

uninstall() {
    # Remove `.gitconfig`
    rm ${HOME}/.gitconfig

    for file in "${!target[@]}"; do
        rm "${target[$file]}"
    done

    e_success "Successfully removed dotfiles"
}

if [[ $# == 0 || "$1" == "install" ]]; then
    # Ask before potentially overwriting files
    seek_confirmation "Warning: This step may overwrite your existing dotfiles."

    if ! is_confirmed; then
        printf "Aborting...\n"
        exit 1
    fi

    install
    exit
fi

if [[ "$1" == "update" ]]; then
    # Ask before potentially overwriting files
    seek_confirmation "Warning: This step may overwrite your existing dotfiles."

    if ! is_confirmed; then
        printf "Aborting...\n"
        exit 1
    fi

    update
    exit
fi

if [[ "$1" == "remove" ]]; then
    # Ask before removing files
    seek_confirmation "Warning: This step will remove your existing dotfiles."

    if !is_confirmed; then
        printf "Aborting...\n"
        exit 1
    fi

    uninstall
    exit
fi

# Some incorrect way of calling `dotfiles`
run_help